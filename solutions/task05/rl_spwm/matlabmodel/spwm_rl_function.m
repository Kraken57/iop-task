function [spwm_waveform, x24, x73, state] = spwm_rl_function(modulation_index, params, varargin)
%SPWM_RL_FUNCTION Function implementing an imported ONNX network.
%
% THIS FILE WAS AUTO-GENERATED BY importONNXFunction.
% ONNX Operator Set Version: 12
%
% Variable names in this function are taken from the original ONNX file.
%
% [SPWM_WAVEFORM, X24, X73] = spwm_rl_function(MODULATION_INDEX, PARAMS)
%			- Evaluates the imported ONNX network SPWM_RL_FUNCTION with input(s)
%			MODULATION_INDEX and the imported network parameters in PARAMS. Returns
%			network output(s) in SPWM_WAVEFORM, X24, X73.
%
% [SPWM_WAVEFORM, X24, X73, STATE] = spwm_rl_function(MODULATION_INDEX, PARAMS)
%			- Additionally returns state variables in STATE. When training,
%			use this form and set TRAINING to true.
%
% [__] = spwm_rl_function(MODULATION_INDEX, PARAMS, 'NAME1', VAL1, 'NAME2', VAL2, ...)
%			- Specifies additional name-value pairs described below:
%
% 'Training'
% 			Boolean indicating whether the network is being evaluated for
%			prediction or training. If TRAINING is true, state variables
%			will be updated.
%
% 'InputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			 between the dimensions of the input data and the dimensions of
%			the ONNX model input. For example, the permutation from HWCN
%			(MATLAB standard) to NCHW (ONNX standard) uses the vector
%			[4 3 1 2]. See the documentation for IMPORTONNXFUNCTION for
%			more information about automatic permutation.
%
%			'none' - Input(s) are passed in the ONNX model format. See 'Inputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between input data dimensions and the expected
%			ONNX input dimensions.%
%			cell array - If the network has multiple inputs, each cell
%			contains 'auto', 'none', or a numeric vector.
%
% 'OutputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			between the dimensions of the output and a conventional MATLAB
%			dimension ordering. For example, the permutation from NC (ONNX
%			standard) to CN (MATLAB standard) uses the vector [2 1]. See
%			the documentation for IMPORTONNXFUNCTION for more information
%			about automatic permutation.
%
%			'none' - Return output(s) as given by the ONNX model. See 'Outputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between the ONNX output dimensions and the
%			desired output dimensions.%
%			cell array - If the network has multiple outputs, each cell
%			contains 'auto', 'none' or a numeric vector.
%
% Inputs:
% -------
% MODULATION_INDEX
%			- Input(s) to the ONNX network.
%			  The input size(s) expected by the ONNX file are:
%				  MODULATION_INDEX:		[batch_size, 1]				Type: FLOAT
%			  By default, the function will try to permute the input(s)
%			  into this dimension ordering. If the default is incorrect,
%			  use the 'InputDataPermutation' argument to control the
%			  permutation.
%
%
% PARAMS	- Network parameters returned by 'importONNXFunction'.
%
%
% Outputs:
% --------
% SPWM_WAVEFORM, X24, X73
%			- Output(s) of the ONNX network.
%			  Without permutation, the size(s) of the outputs are:
%				  SPWM_WAVEFORM:		[batch_size, Reshapespwm_waveform_dim_1]				Type: FLOAT
%				  X24:		[batch_size, 1]				Type: FLOAT
%				  X73:		[ReduceSum73_dim_0, 1]				Type: FLOAT
%			  By default, the function will try to permute the output(s)
%			  from this dimension ordering into a conventional MATLAB
%			  ordering. If the default is incorrect, use the
%			  'OutputDataPermutation' argument to control the permutation.
%
% STATE		- (Optional) State variables. When TRAINING is true, these will
% 			  have been updated from the original values in PARAMS.State.
%
%
%  See also importONNXFunction

% Preprocess the input data and arguments:
[modulation_index, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(modulation_index, params, varargin{:});
% Put all variables into a single struct to implement dynamic scoping:
[Vars, NumDims] = packageVariables(params, {'modulation_index'}, {modulation_index}, [2]);
% Call the top-level graph function:
[spwm_waveform, x24, x73, spwm_waveformNumDims, x24NumDims, x73NumDims, state] = main_graphGraph1000(modulation_index, NumDims.modulation_index, Vars, NumDims, Training, params.State);
% Postprocess the output data
[spwm_waveform, x24, x73] = postprocessOutput(spwm_waveform, x24, x73, outputDataPerms, anyDlarrayInputs, Training, varargin{:});
end

function [spwm_waveform, x24, x73, spwm_waveformNumDims1020, x24NumDims1021, x73NumDims1022, state] = main_graphGraph1000(modulation_index, modulation_indexNumDims1019, Vars, NumDims, Training, state)
% Function implementing the graph 'main_graphGraph1000'
% Update Vars and NumDims from the graph's formal input parameters. Note that state variables are already in Vars.
Vars.modulation_index = modulation_index;
NumDims.modulation_index = modulation_indexNumDims1019;

% Execute the operators:
% Cast:
if islogical(Vars.modulation_index)
    Vars.modulation_index = single(Vars.modulation_index);
end
Vars.x_Cast_output_0 = single(Vars.modulation_index);
NumDims.x_Cast_output_0 = NumDims.modulation_index;

% Flatten:
[dim1, dim2, NumDims.x_features_extractor_flatten_Flatten_out] = prepareFlattenArgs(Vars.x_Cast_output_0, 1, NumDims.x_Cast_output_0);
Vars.x_features_extractor_flatten_Flatten_out = reshape(Vars.x_Cast_output_0, dim1, dim2);

% Gemm:
[A, B, C, alpha, beta, NumDims.x_mlp_extractor_policy_net_policy_net__1] = prepareGemmArgs(Vars.x_features_extractor_flatten_Flatten_out, Vars.mlp_extractor_policy_net_0_weight, Vars.mlp_extractor_policy_net_0_bias, Vars.Gemmalpha1001, Vars.Gemmbeta1002, 0, 1, NumDims.mlp_extractor_policy_net_0_bias);
Vars.x_mlp_extractor_policy_net_policy_net__1 = alpha*B*A + beta*C;

% Tanh:
Vars.x_mlp_extractor_policy_net_policy_net__2 = tanh(Vars.x_mlp_extractor_policy_net_policy_net__1);
NumDims.x_mlp_extractor_policy_net_policy_net__2 = NumDims.x_mlp_extractor_policy_net_policy_net__1;

% Gemm:
[A, B, C, alpha, beta, NumDims.x_mlp_extractor_policy_net_policy_net__3] = prepareGemmArgs(Vars.x_mlp_extractor_policy_net_policy_net__2, Vars.mlp_extractor_policy_net_2_weight, Vars.mlp_extractor_policy_net_2_bias, Vars.Gemmalpha1003, Vars.Gemmbeta1004, 0, 1, NumDims.mlp_extractor_policy_net_2_bias);
Vars.x_mlp_extractor_policy_net_policy_net__3 = alpha*B*A + beta*C;

% Tanh:
Vars.x_mlp_extractor_policy_net_policy_net__4 = tanh(Vars.x_mlp_extractor_policy_net_policy_net__3);
NumDims.x_mlp_extractor_policy_net_policy_net__4 = NumDims.x_mlp_extractor_policy_net_policy_net__3;

% Gemm:
[A, B, C, alpha, beta, NumDims.x_mlp_extractor_value_net_value_net_0__1] = prepareGemmArgs(Vars.x_features_extractor_flatten_Flatten_out, Vars.mlp_extractor_value_net_0_weight, Vars.mlp_extractor_value_net_0_bias, Vars.Gemmalpha1005, Vars.Gemmbeta1006, 0, 1, NumDims.mlp_extractor_value_net_0_bias);
Vars.x_mlp_extractor_value_net_value_net_0__1 = alpha*B*A + beta*C;

% Tanh:
Vars.x_mlp_extractor_value_net_value_net_1__1 = tanh(Vars.x_mlp_extractor_value_net_value_net_0__1);
NumDims.x_mlp_extractor_value_net_value_net_1__1 = NumDims.x_mlp_extractor_value_net_value_net_0__1;

% Gemm:
[A, B, C, alpha, beta, NumDims.x_mlp_extractor_value_net_value_net_2__1] = prepareGemmArgs(Vars.x_mlp_extractor_value_net_value_net_1__1, Vars.mlp_extractor_value_net_2_weight, Vars.mlp_extractor_value_net_2_bias, Vars.Gemmalpha1007, Vars.Gemmbeta1008, 0, 1, NumDims.mlp_extractor_value_net_2_bias);
Vars.x_mlp_extractor_value_net_value_net_2__1 = alpha*B*A + beta*C;

% Tanh:
Vars.x_mlp_extractor_value_net_value_net_3__1 = tanh(Vars.x_mlp_extractor_value_net_value_net_2__1);
NumDims.x_mlp_extractor_value_net_value_net_3__1 = NumDims.x_mlp_extractor_value_net_value_net_2__1;

% Gemm:
[A, B, C, alpha, beta, NumDims.x24] = prepareGemmArgs(Vars.x_mlp_extractor_value_net_value_net_3__1, Vars.value_net_weight, Vars.value_net_bias, Vars.Gemmalpha1009, Vars.Gemmbeta1010, 0, 1, NumDims.value_net_bias);
Vars.x24 = alpha*B*A + beta*C;

% Gemm:
[A, B, C, alpha, beta, NumDims.x_action_net_Gemm_output_0] = prepareGemmArgs(Vars.x_mlp_extractor_policy_net_policy_net__4, Vars.action_net_weight, Vars.action_net_bias, Vars.Gemmalpha1011, Vars.Gemmbeta1012, 0, 1, NumDims.action_net_bias);
Vars.x_action_net_Gemm_output_0 = alpha*B*A + beta*C;

% Shape:
[Vars.x_Shape_output_0, NumDims.x_Shape_output_0] = onnxShape(Vars.x_action_net_Gemm_output_0, NumDims.x_action_net_Gemm_output_0, 0, NumDims.x_action_net_Gemm_output_0+1);

% ConstantOfShape:
[Vars.x_ConstantOfShape_output_0, NumDims.x_ConstantOfShape_output_0] = onnxConstantOfShape(Vars.ConstantOfShapeValue1013, Vars.x_Shape_output_0);

% Add:
Vars.x_Add_output_0 = Vars.x_ConstantOfShape_output_0 + Vars.x_action_net_Gemm_output_0;
NumDims.x_Add_output_0 = max(NumDims.x_ConstantOfShape_output_0, NumDims.x_action_net_Gemm_output_0);

% Shape:
[Vars.x_Shape_1_output_0, NumDims.x_Shape_1_output_0] = onnxShape(Vars.x_Add_output_0, NumDims.x_Add_output_0, 0, NumDims.x_Add_output_0+1);

% Expand:
[shape, NumDims.x_Expand_output_0] = prepareExpandArgs(Vars.x_Shape_1_output_0);
Vars.x_Expand_output_0 = Vars.x_action_net_Gemm_output_0 + zeros(shape);

% Shape:
[Vars.x_Shape_2_output_0, NumDims.x_Shape_2_output_0] = onnxShape(Vars.x_Expand_output_0, NumDims.x_Expand_output_0, 0, NumDims.x_Expand_output_0+1);

% Gather:
[Vars.x_Gather_output_0, NumDims.x_Gather_output_0] = onnxGather(Vars.x_Shape_2_output_0, Vars.x_Constant_output_0, 0, NumDims.x_Shape_2_output_0, NumDims.x_Constant_output_0);

% Shape:
[Vars.x_Shape_3_output_0, NumDims.x_Shape_3_output_0] = onnxShape(Vars.x_Expand_output_0, NumDims.x_Expand_output_0, 0, NumDims.x_Expand_output_0+1);

% Gather:
[Vars.x_Gather_1_output_0, NumDims.x_Gather_1_output_0] = onnxGather(Vars.x_Shape_3_output_0, Vars.x_Constant_1_output_0, 0, NumDims.x_Shape_3_output_0, NumDims.x_Constant_1_output_0);

% Sigmoid:
Vars.x_Sigmoid_output_0 = sigmoid(Vars.x_Expand_output_0);
NumDims.x_Sigmoid_output_0 = NumDims.x_Expand_output_0;

% Unsqueeze:
[shape, NumDims.x_Unsqueeze_output_0] = prepareUnsqueezeArgs(Vars.x_Gather_output_0, Vars.UnsqueezeAxes1014, NumDims.x_Gather_output_0);
Vars.x_Unsqueeze_output_0 = reshape(Vars.x_Gather_output_0, shape);

% Unsqueeze:
[shape, NumDims.x_Unsqueeze_1_output_0] = prepareUnsqueezeArgs(Vars.x_Gather_1_output_0, Vars.UnsqueezeAxes1015, NumDims.x_Gather_1_output_0);
Vars.x_Unsqueeze_1_output_0 = reshape(Vars.x_Gather_1_output_0, shape);

% Concat:
[Vars.x_Concat_output_0, NumDims.x_Concat_output_0] = onnxConcat(0, {Vars.x_Unsqueeze_output_0, Vars.x_Unsqueeze_1_output_0}, [NumDims.x_Unsqueeze_output_0, NumDims.x_Unsqueeze_1_output_0]);

% Reshape:
[shape, NumDims.x_Reshape_output_0] = prepareReshapeArgs(Vars.x_Concat_output_0, Vars.x_Constant_2_output_0, NumDims.x_Concat_output_0, 0);
Vars.x_Reshape_output_0 = reshape(Vars.x_Concat_output_0, shape{:});

% Shape:
[Vars.x_Shape_4_output_0, NumDims.x_Shape_4_output_0] = onnxShape(Vars.x_Reshape_output_0, NumDims.x_Reshape_output_0, 0, NumDims.x_Reshape_output_0+1);

% ConstantOfShape:
[Vars.x_ConstantOfShape_1_output_0, NumDims.x_ConstantOfShape_1_output_0] = onnxConstantOfShape(Vars.ConstantOfShapeValue1016, Vars.x_Shape_4_output_0);

% Mul:
Vars.x_Mul_output_0 = Vars.x_ConstantOfShape_1_output_0 .* Vars.x_Constant_3_output_0;
NumDims.x_Mul_output_0 = max(NumDims.x_ConstantOfShape_1_output_0, NumDims.x_Constant_3_output_0);

% Equal:
Vars.x_Equal_output_0 = Vars.x_Reshape_output_0 == Vars.x_Mul_output_0;
NumDims.x_Equal_output_0 = max(NumDims.x_Reshape_output_0, NumDims.x_Mul_output_0);

% Where:
[Vars.x_Where_output_0, NumDims.x_Where_output_0] = onnxWhere(Vars.x_Equal_output_0, Vars.x_ConstantOfShape_1_output_0, Vars.x_Reshape_output_0, NumDims.x_Equal_output_0, NumDims.x_ConstantOfShape_1_output_0, NumDims.x_Reshape_output_0);

% Expand:
[shape, NumDims.x_Expand_1_output_0] = prepareExpandArgs(Vars.x_Where_output_0);
Vars.x_Expand_1_output_0 = Vars.x_Sigmoid_output_0 + zeros(shape);

% PLACEHOLDER FUNCTION FOR UNSUPPORTED OPERATOR (RandomUniformLike):
%[Vars.x_RandomUniformLike_output_0, NumDims.x_RandomUniformLike_output_0] = PLACEHOLDER(Vars.x_Expand_1_output_0);
Vars.x_RandomUniformLike_output_0 = rand(size(Vars.x_Expand_1_output_0), 'single'); 
NumDims.x_RandomUniformLike_output_0 = ndims(Vars.x_Expand_1_output_0);

% Less:
Vars.x_Less_output_0 = Vars.x_RandomUniformLike_output_0 < Vars.x_Expand_1_output_0;
NumDims.x_Less_output_0 = max(NumDims.x_RandomUniformLike_output_0, NumDims.x_Expand_1_output_0);

% Cast:
if islogical(Vars.x_Less_output_0)
    Vars.x_Less_output_0 = single(Vars.x_Less_output_0);
end
Vars.x_Cast_1_output_0 = single(Vars.x_Less_output_0);
NumDims.x_Cast_1_output_0 = NumDims.x_Less_output_0;

% Shape:
[Vars.x_Shape_5_output_0, NumDims.x_Shape_5_output_0] = onnxShape(Vars.x_Expand_output_0, NumDims.x_Expand_output_0, 0, NumDims.x_Expand_output_0+1);

% ConstantOfShape:
[Vars.x_ConstantOfShape_2_output_0, NumDims.x_ConstantOfShape_2_output_0] = onnxConstantOfShape(Vars.ConstantOfShapeValue1017, Vars.x_Shape_5_output_0);

% Add:
Vars.x_Add_1_output_0 = Vars.x_ConstantOfShape_2_output_0 + Vars.x_Expand_output_0;
NumDims.x_Add_1_output_0 = max(NumDims.x_ConstantOfShape_2_output_0, NumDims.x_Expand_output_0);

% Add:
Vars.x_Add_2_output_0 = Vars.x_Add_1_output_0 + Vars.x_Cast_1_output_0;
NumDims.x_Add_2_output_0 = max(NumDims.x_Add_1_output_0, NumDims.x_Cast_1_output_0);

% Shape:
[Vars.x_Shape_6_output_0, NumDims.x_Shape_6_output_0] = onnxShape(Vars.x_Add_2_output_0, NumDims.x_Add_2_output_0, 0, NumDims.x_Add_2_output_0+1);

% Expand:
[shape, NumDims.x_Expand_2_output_0] = prepareExpandArgs(Vars.x_Shape_6_output_0);
Vars.x_Expand_2_output_0 = Vars.x_Expand_output_0 + zeros(shape);

% Shape:
[Vars.x_Shape_7_output_0, NumDims.x_Shape_7_output_0] = onnxShape(Vars.x_Add_2_output_0, NumDims.x_Add_2_output_0, 0, NumDims.x_Add_2_output_0+1);

% Expand:
[shape, NumDims.x_Expand_3_output_0] = prepareExpandArgs(Vars.x_Shape_7_output_0);
Vars.x_Expand_3_output_0 = Vars.x_Cast_1_output_0 + zeros(shape);

% Sigmoid:
Vars.x_Sigmoid_1_output_0 = sigmoid(Vars.x_Expand_2_output_0);
NumDims.x_Sigmoid_1_output_0 = NumDims.x_Expand_2_output_0;

% Log:
Vars.x_Log_output_0 = log(Vars.x_Sigmoid_1_output_0);
NumDims.x_Log_output_0 = NumDims.x_Sigmoid_1_output_0;

% Sub:
Vars.x_Sub_output_0 = Vars.x_Constant_4_output_0 - Vars.x_Sigmoid_1_output_0;
NumDims.x_Sub_output_0 = max(NumDims.x_Constant_4_output_0, NumDims.x_Sigmoid_1_output_0);

% Sub:
Vars.x_Sub_1_output_0 = Vars.x_Constant_5_output_0 - Vars.x_Expand_3_output_0;
NumDims.x_Sub_1_output_0 = max(NumDims.x_Constant_5_output_0, NumDims.x_Expand_3_output_0);

% Log:
Vars.x_Log_1_output_0 = log(Vars.x_Sub_output_0);
NumDims.x_Log_1_output_0 = NumDims.x_Sub_output_0;

% Mul:
Vars.x_Mul_1_output_0 = Vars.x_Expand_3_output_0 .* Vars.x_Log_output_0;
NumDims.x_Mul_1_output_0 = max(NumDims.x_Expand_3_output_0, NumDims.x_Log_output_0);

% Mul:
Vars.x_Mul_2_output_0 = Vars.x_Sub_1_output_0 .* Vars.x_Log_1_output_0;
NumDims.x_Mul_2_output_0 = max(NumDims.x_Sub_1_output_0, NumDims.x_Log_1_output_0);

% Add:
Vars.x_Add_3_output_0 = Vars.x_Mul_1_output_0 + Vars.x_Mul_2_output_0;
NumDims.x_Add_3_output_0 = max(NumDims.x_Mul_1_output_0, NumDims.x_Mul_2_output_0);

% Neg:
Vars.x_Neg_output_0 = -(Vars.x_Add_3_output_0);
NumDims.x_Neg_output_0 = NumDims.x_Add_3_output_0;

% Neg:
Vars.x_Neg_1_output_0 = -(Vars.x_Neg_output_0);
NumDims.x_Neg_1_output_0 = NumDims.x_Neg_output_0;

% ReduceSum:
dims = prepareReduceArgs(Vars.ReduceSumAxes1018, NumDims.x_Neg_1_output_0);
Vars.x73 = sum(Vars.x_Neg_1_output_0, dims);
[Vars.x73, NumDims.x73] = onnxSqueeze(Vars.x73, Vars.ReduceSumAxes1018, NumDims.x_Neg_1_output_0);

% Reshape:
[shape, NumDims.spwm_waveform] = prepareReshapeArgs(Vars.x_Expand_3_output_0, Vars.x_Constant_6_output_0, NumDims.x_Expand_3_output_0, 0);
Vars.spwm_waveform = reshape(Vars.x_Expand_3_output_0, shape{:});

% Set graph output arguments from Vars and NumDims:
spwm_waveform = Vars.spwm_waveform;
spwm_waveformNumDims1020 = NumDims.spwm_waveform;
x24 = Vars.x24;
x24NumDims1021 = NumDims.x24;
x73 = Vars.x73;
x73NumDims1022 = NumDims.x73;
% Set output state from Vars:
state = updateStruct(state, Vars);
end

function [inputDataPerms, outputDataPerms, Training] = parseInputs(modulation_index, numDataOutputs, params, varargin)
% Function to validate inputs to spwm_rl_function:
p = inputParser;
isValidArrayInput = @(x)isnumeric(x) || isstring(x);
isValidONNXParameters = @(x)isa(x, 'ONNXParameters');
addRequired(p, 'modulation_index', isValidArrayInput);
addRequired(p, 'params', isValidONNXParameters);
addParameter(p, 'InputDataPermutation', 'auto');
addParameter(p, 'OutputDataPermutation', 'auto');
addParameter(p, 'Training', false);
parse(p, modulation_index, params, varargin{:});
inputDataPerms = p.Results.InputDataPermutation;
outputDataPerms = p.Results.OutputDataPermutation;
Training = p.Results.Training;
if isnumeric(inputDataPerms)
    inputDataPerms = {inputDataPerms};
end
if isstring(inputDataPerms) && isscalar(inputDataPerms) || ischar(inputDataPerms)
    inputDataPerms = repmat({inputDataPerms},1,1);
end
if isnumeric(outputDataPerms)
    outputDataPerms = {outputDataPerms};
end
if isstring(outputDataPerms) && isscalar(outputDataPerms) || ischar(outputDataPerms)
    outputDataPerms = repmat({outputDataPerms},1,numDataOutputs);
end
end

function [modulation_index, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(modulation_index, params, varargin)
% Parse input arguments
[inputDataPerms, outputDataPerms, Training] = parseInputs(modulation_index, 3, params, varargin{:});
anyDlarrayInputs = any(cellfun(@(x)isa(x, 'dlarray'), {modulation_index}));
% Make the input variables into unlabelled dlarrays:
modulation_index = makeUnlabeledDlarray(modulation_index);
% Permute inputs if requested:
modulation_index = permuteInputVar(modulation_index, inputDataPerms{1}, 2);
% Check input size(s):
checkInputSize(size(modulation_index), {'batch_size' 1}, "modulation_index");
end

function [spwm_waveform, x24, x73] = postprocessOutput(spwm_waveform, x24, x73, outputDataPerms, anyDlarrayInputs, Training, varargin)
% Set output type:
if ~anyDlarrayInputs && ~Training
    if isdlarray(spwm_waveform)
        spwm_waveform = extractdata(spwm_waveform);
    end
    if isdlarray(x24)
        x24 = extractdata(x24);
    end
    if isdlarray(x73)
        x73 = extractdata(x73);
    end
end
% Permute outputs if requested:
spwm_waveform = permuteOutputVar(spwm_waveform, outputDataPerms{1}, 2);
x24 = permuteOutputVar(x24, outputDataPerms{2}, 2);
x73 = permuteOutputVar(x73, outputDataPerms{3}, 1);
end


%% dlarray functions implementing ONNX operators:

function [Y, numDimsY] = onnxConcat(ONNXAxis, XCell, numDimsXArray)
% Concatentation that treats all empties the same. Necessary because
% dlarray.cat does not allow, for example, cat(1, 1x1, 1x0) because the
% second dimension sizes do not match.

% Copyright 2021 The MathWorks, Inc.

numDimsY = numDimsXArray(1);
XCell(cellfun(@isempty, XCell)) = [];
if isempty(XCell)
    Y = dlarray([]);
else
    if ONNXAxis<0
        ONNXAxis = ONNXAxis + numDimsY;
    end
    DLTAxis = numDimsY - ONNXAxis;
    Y = cat(DLTAxis, XCell{:});
end
end

function [Y, numDimsY] = onnxConstantOfShape(value, ONNXShape)
% Returns a DLT tensor with the reverse of the ONNXShape.

% Copyright 2020 The MathWorks, Inc.

DLTShape = fliplr(extractdata(ONNXShape(:)'));
numDimsY = numel(DLTShape);
switch numDimsY
    case 0
        % If shape is empty, output is a scalar
        Y = value;
    case 1
        Y = ones(DLTShape,1) .* value;
    otherwise
        Y = ones(DLTShape) .* value;
end
end

function [Y, numDimsY] = onnxGather(X, ONNXIdx, ONNXAxis, numDimsX, numDimsIdx)
% Function implementing the ONNX Gather operator

% In ONNX, 'Gather' first indexes into dimension ONNXAxis of data, using
% the contents of ONNXIdx as the indices. Then, it reshapes the ONNXAxis
% into the shape of ONNXIdx.
%   Example 1:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6 7], and axis=1.
% The result has shape [2 6 7 4 5].
%   Example 2:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6], and axis=1.
% The result has shape [2 6 4 5].
%   Example 3:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [] (a scalar), and axis=1.
% The result has shape [2 4 5].
%
% Since we're using reverse indexing relative to ONNX, in this function
% data and ONNXIdx both have reversed dimension ordering.

% Copyright 2020-2021 The MathWorks, Inc.

numDimsY = numDimsIdx + (numDimsX - 1);
if isempty(X)
    Y = X;
    return;
end
% (1) First, do the subsref part of Gather
if ONNXAxis<0
    ONNXAxis = ONNXAxis + numDimsX;                                 % Axis can be negative. Convert it to its positive equivalent.
end
dltAxis = numDimsX - ONNXAxis;                                      % Convert axis to DLT. ONNXAxis is origin 0 and we index from the end
ONNXIdx(ONNXIdx<0) = ONNXIdx(ONNXIdx<0) + size(X, dltAxis);         % ONNXIdx can have negative components. Make them positive.
dltIdx  = extractdata(ONNXIdx) + 1;                                 % ONNXIdx is origin-0 in ONNX, so add 1 to get dltIdx
% Use subsref to index into data
Indices.subs = repmat({':'}, 1, numDimsX);
Indices.subs{dltAxis} = dltIdx(:);                                  % Index as a column to ensure the output is 1-D in the indexed dimension (for now).
Indices.type = '()';
Y = subsref(X, Indices);
% (2) Now do the reshaping part of Gather
shape = size(Y, 1:numDimsX);
if numDimsIdx == 0
    % Delete the indexed dimension
    shape(dltAxis) = [];
elseif numDimsIdx > 1
    % Reshape the indexed dimension into the shape of ONNXIdx
    shape = [shape(1:dltAxis-1) size(ONNXIdx, 1:numDimsIdx) shape(dltAxis+1:end)];
end
% Extend the shape to 2D so it's valid MATLAB
if numel(shape) < 2
    shape = [shape ones(1,2-numel(shape))];
end
Y = reshape(Y, shape);
end

function [Y, numDimsY] = onnxShape(X, numDimsX, startAxis, endAxis)
% Implements the ONNX Shape operator
% Return the reverse ONNX shape as a 1D column vector

% Copyright 2020-2024 The MathWorks, Inc.

switch numDimsX
    case 0
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(1);
        end
    case 1
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(size(X,1));
        end
    otherwise
        if(endAxis<0)
            %  If the endAxis is smaller than 0 after converting it positive,
            % the endAxis is 0
            endAxis = max(0, numDimsX + endAxis);
        end
        if(startAxis<0)
            %  If the startAxis is smaller than 0 after converting it positive,
            % the startAxis is 0
            startAxis = max(0, numDimsX + startAxis);
        end
        % transform startAxis and endAxis from 0 index to 1 index
        startAxis = startAxis + 1;
        endAxis = endAxis + 1;
        % if startAxis is larger than numDimsX or endAxis is larger than
        % numDimsX + 1, cramp it to the upper bound. The endAxis is exclusive,
        % transform it to MATLAB inclusive way
        endAxis = min(endAxis, numDimsX + 1) - 1;
        startAxis = min(startAxis, numDimsX);
        if endAxis < startAxis || endAxis == 0
            Y = dlarray(0);
        else
            Y = dlarray(fliplr(size(X, (numDimsX-endAxis+1):(numDimsX-startAxis+1)))');
        end
end
numDimsY = 1;
end

function [Y, numDimsY] = onnxSqueeze(X, ONNXAxes, numDimsX)
% Implements the ONNX Squeeze operator

% Copyright 2020 The MathWorks, Inc.

if numDimsX == 0
    Y = X;
    numDimsY = numDimsX;
else
    % Find the new ONNX shape
    curOShape = size(X, numDimsX:-1:1);
    if isempty(ONNXAxes)
        newOShape = curOShape(curOShape ~= 1);
    else
        ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
        newOShape = curOShape;
        newOShape(ONNXAxes+1) = [];
    end
    % Get numDimsY from ONNX shape
    numDimsY  = numel(newOShape);
    newMShape = [fliplr(newOShape) ones(1, 2-numDimsY)];    % Append 1's to shape if numDims<2
    Y         = reshape(X, newMShape);
end
end

function [output, numDimsOutput] = onnxWhere(condition, X, Y, numDimsCondition, numDimsX, numDimsY)

% Copyright 2020 The MathWorks, Inc.

bigz = zeros(size(condition + X + Y));      % broadcast
condition = condition + bigz;
X = X + bigz;
output = Y + bigz;
output(condition==1) = X(condition==1);
numDimsOutput = max([numDimsCondition, numDimsX, numDimsY]);
end

function [shape, numDimsY] = prepareExpandArgs(ONNXShape)
% Prepares arguments for implementing the ONNX Expand operator

%   Copyright 2020 The MathWorks, Inc.

% Broadcast X to ONNXShape. The shape of X must be compatible with ONNXShape.
ONNXShape = extractdata(ONNXShape);
shape = fliplr(ONNXShape(:)');
if numel(shape) < 2
    shape = [shape ones(1, 2-numel(shape))];
end
numDimsY = numel(ONNXShape);
end

function [dim1, dim2, numDimsY] = prepareFlattenArgs(X, ONNXAxis, numDimsX)
% Prepares arguments for implementing the ONNX Flatten operator

%   Copyright 2020 The MathWorks, Inc.

% ONNXAxis is the number of dimensions that go on the left in ONNX, so here
% it is the number of dimensions that go on the right.
if ONNXAxis < 0
    ONNXAxis = ONNXAxis + numDimsX;
end
if ONNXAxis == 0
    dim2 = 1;
else
    dim2 = prod(size(X, numDimsX+1-ONNXAxis:numDimsX));     % numel on the right
end
dim1 = numel(X)/dim2;                                   % numel on the left
numDimsY = 2;
end

function [A, B, C, alpha, beta, numDimsY] = prepareGemmArgs(A, B, C, alpha, beta, transA, transB, numDimsC)

%   Copyright 2020 The MathWorks, Inc.

% Prepares arguments for implementing the ONNX Gemm operator
if transA
    A = A';
end
if transB
    B = B';
end
if numDimsC < 2
    C = C(:);   % C can be broadcast to [N M]. Make C a col vector ([N 1])
end
numDimsY = 2;
% Y=B*A because we want (AB)'=B'A', and B and A are already transposed.
end

function dims = prepareReduceArgs(ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Reduce operator

%   Copyright 2020 The MathWorks, Inc.

if isempty(ONNXAxes)
    ONNXAxes = 0:numDimsX-1;   % All axes
end
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
dims = numDimsX - ONNXAxes;
end

function [DLTShape, numDimsY] = prepareReshapeArgs(X, ONNXShape, numDimsX, allowzero)
% Prepares arguments for implementing the ONNX Reshape operator

%   Copyright 2020-2024 The MathWorks, Inc.

ONNXShape = flip(extractdata(ONNXShape));            % First flip the shape to make it correspond to the dimensions of X.
% In ONNX, 0 means "unchanged" if allowzero is false, and -1 means "infer". In DLT, there is no
% "unchanged", and [] means "infer".
DLTShape = num2cell(ONNXShape);                      % Make a cell array so we can include [].
% Replace zeros with the actual size if allowzero is false
if any(ONNXShape==0) && allowzero==0
    i0 = find(ONNXShape==0);
    DLTShape(i0) = num2cell(size(X, numDimsX - numel(ONNXShape) + i0));  % right-align the shape vector and dims
end
if any(ONNXShape == -1)
    % Replace -1 with []
    i = ONNXShape == -1;
    DLTShape{i} = [];
end
if numel(DLTShape)==1
    DLTShape = [DLTShape 1];
end
numDimsY = numel(ONNXShape);
end

function [newShape, numDimsY] = prepareUnsqueezeArgs(X, ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Unsqueeze operator

%   Copyright 2020-2021 The MathWorks, Inc.

numDimsY = numDimsX + numel(ONNXAxes);
ONNXAxes = extractdata(ONNXAxes);
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsY;
ONNXAxes = sort(ONNXAxes);                                              % increasing order
if numDimsY == 1
    newShape = size(X);
else
    DLTAxes  = flip(numDimsY - ONNXAxes);                                  % increasing order
    newShape = ones(1, numDimsY);
    posToSet = setdiff(1:numDimsY, DLTAxes, 'stable');
    newShape(posToSet) = size(X, 1:numel(posToSet));
end
end

%% Utility functions:

function s = appendStructs(varargin)
% s = appendStructs(s1, s2,...). Assign all fields in s1, s2,... into s.

%   Copyright 2020 The MathWorks, Inc.

if isempty(varargin)
    s = struct;
else
    s = varargin{1};
    for i = 2:numel(varargin)
        fromstr = varargin{i};
        fs = fieldnames(fromstr);
        for j = 1:numel(fs)
            s.(fs{j}) = fromstr.(fs{j});
        end
    end
end
end

function checkInputSize(inputShape, expectedShape, inputName)

%   Copyright 2020-2021 The MathWorks, Inc.

if numel(expectedShape)==0
    % The input is a scalar
    if ~isequal(inputShape, [1 1])
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, "[1,1]", inputSizeStr));
    end
elseif numel(expectedShape)==1
    % The input is a vector
    if ~shapeIsColumnVector(inputShape) || ~iSizesMatch({inputShape(1)}, expectedShape)
        expectedShape{2} = 1;
        expectedSizeStr = makeSizeString(expectedShape);
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
else
    % The input has 2 dimensions or more

    % The input dimensions have been reversed; flip them back to compare to the
    % expected ONNX shape.
    inputShape = fliplr(inputShape);

    % If the expected shape has fewer dims than the input shape, error.
    if numel(expectedShape) < numel(inputShape)
        expectedSizeStr = strjoin(["[", strjoin(string(expectedShape), ","), "]"], "");
        error(message('nnet_cnn_onnx:onnx:InputHasGreaterNDims', inputName, expectedSizeStr));
    end

    % Prepad the input shape with trailing ones up to the number of elements in
    % expectedShape
    inputShape = num2cell([ones(1, numel(expectedShape) - length(inputShape)) inputShape]);

    % Find the number of variable size dimensions in the expected shape
    numVariableInputs = sum(cellfun(@(x) isa(x, 'char') || isa(x, 'string'), expectedShape));

    % Find the number of input dimensions that are not in the expected shape
    % and cannot be represented by a variable dimension
    nonMatchingInputDims = setdiff(string(inputShape), string(expectedShape));
    numNonMatchingInputDims  = numel(nonMatchingInputDims) - numVariableInputs;

    expectedSizeStr = makeSizeString(expectedShape);
    inputSizeStr = makeSizeString(inputShape);
    if numNonMatchingInputDims == 0 && ~iSizesMatch(inputShape, expectedShape)
        % The actual and expected input dimensions match, but in
        % a different order. The input needs to be permuted.
        error(message('nnet_cnn_onnx:onnx:InputNeedsPermute',inputName, expectedSizeStr, inputSizeStr));
    elseif numNonMatchingInputDims > 0
        % The actual and expected input sizes do not match.
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
end
end

function doesMatch = iSizesMatch(inputShape, expectedShape)
% Check whether the input and expected shapes match, in order.
% Size elements match if (1) the elements are equal, or (2) the expected
% size element is a variable (represented by a character vector or string)
doesMatch = true;
for i=1:numel(inputShape)
    if ~(isequal(inputShape{i},expectedShape{i}) || ischar(expectedShape{i}) || isstring(expectedShape{i}))
        doesMatch = false;
        return
    end
end
end

function sizeStr = makeSizeString(shape)
sizeStr = strjoin(["[", strjoin(string(shape), ","), "]"], "");
end

function isVec = shapeIsColumnVector(shape)
if numel(shape) == 2 && shape(2) == 1
    isVec = true;
else
    isVec = false;
end
end
function X = makeUnlabeledDlarray(X)
% Make numeric X into an unlabelled dlarray

%   Copyright 2020-2021 The MathWorks, Inc.

if isa(X, 'dlarray')
    X = stripdims(X);
elseif isnumeric(X)
    if isinteger(X)
        % Make ints double so they can combine with anything without
        % reducing precision
        X = double(X);
    end
    X = dlarray(X);
end
end

function [Vars, NumDims] = packageVariables(params, inputNames, inputValues, inputNumDims)

%   Copyright 2020 The MathWorks, Inc.

% inputNames, inputValues are cell arrays. inputRanks is a numeric vector.
Vars = appendStructs(params.Learnables, params.Nonlearnables, params.State);
NumDims = params.NumDimensions;
% Add graph inputs
for i = 1:numel(inputNames)
    Vars.(inputNames{i}) = inputValues{i};
    NumDims.(inputNames{i}) = inputNumDims(i);
end
end

function X = permuteInputVar(X, userDataPerm, onnxNDims)

%   Copyright 2020-2021 The MathWorks, Inc.
% Returns reverse-ONNX ordering
if onnxNDims == 0
    return;
elseif onnxNDims == 1 && isvector(X)
    X = X(:);
    return;
elseif isnumeric(userDataPerm)
    % Permute into reverse ONNX ordering
    if numel(userDataPerm) ~= onnxNDims
        error(message('nnet_cnn_onnx:onnx:InputPermutationSize', numel(userDataPerm), onnxNDims));
    end
    perm = fliplr(userDataPerm);
elseif isequal(userDataPerm, 'auto') && onnxNDims == 4
    % Permute MATLAB HWCN to reverse onnx (WHCN)
    perm = [2 1 3 4];
elseif isequal(userDataPerm, 'as-is')
    % Do not permute the input
    perm = 1:ndims(X);
else
    % userDataPerm is either 'none' or 'auto' with no default, which means
    % it's already in onnx ordering, so just make it reverse onnx
    perm = max(2,onnxNDims):-1:1;
end
X = permute(X, perm);
end

function Y = permuteOutputVar(Y, userDataPerm, onnxNDims)

%   Copyright 2020-2021 The MathWorks, Inc.
switch onnxNDims
    case 0
        perm = [];
    case 1
        if isnumeric(userDataPerm)
            % Use the user's permutation because Y is a column vector which
            % already matches ONNX.
            perm = userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            % Treat the 1D onnx vector as a 2D column and transpose it
            perm = [2 1];
        else
            % userDataPerm is 'none'. Leave Y alone because it already
            % matches onnx.
            perm = [];
        end
    otherwise
        % ndims >= 2
        if isnumeric(userDataPerm)
            % Use the inverse of the user's permutation. This is not just the
            % flip of the permutation vector.
            perm = onnxNDims + 1 - userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            if onnxNDims == 2
                % Permute reverse ONNX CN to DLT CN (do nothing)
                perm = [];
            elseif onnxNDims == 4
                % Permute reverse onnx (WHCN) to MATLAB HWCN
                perm = [2 1 3 4];
            else
                % User wants the output in ONNX ordering, so just reverse it from
                % reverse onnx
                perm = onnxNDims:-1:1;
            end
        elseif isequal(userDataPerm, 'as-is')
            % Do not permute the input
            perm = 1:ndims(Y);
        else
            % userDataPerm is 'none', so just make it reverse onnx
            perm = onnxNDims:-1:1;
        end
end
if ~isempty(perm)
    Y = permute(Y, perm);
end
end

function s = updateStruct(s, t)
% Set all existing fields in s from fields in t, ignoring extra fields in
% t.
%   Copyright 2020 The MathWorks, Inc.

for name = transpose(fieldnames(s))
    s.(name{1}) = t.(name{1});
end
end
